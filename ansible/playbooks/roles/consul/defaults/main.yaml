# default variables to generate consul configuration file
#

# system user to run consul service
consul_user: "consul"

# system consul group
consul_group: "consul"

# consul temporaryr directory
consul_tmp_dir: "/tmp"

# consul configuration directory
consul_config_dir: "/etc/consul.d"

# consul configuration file
consul_config_file: "consul.hcl"

# consul_datacenter
# This flag controls the datacenter in which the agent is running.
# Nodes in the same datacenter should be on a single LAN.
consul_datacenter: "dc1"

# consul_data_dir
# Data directory for the agent to store state. This is required for all agents.
consul_data_dir: "/opt/consul"

# The address to which Consul will bind client interfaces, including the HTTP and DNS
# servers.
consul_client_addr: "127.0.0.1"

# Enables the built-in web UI server and the required HTTP routes.
consul_ui_config:
  enabled: true

# This flag is used to control if an agent is in server or client mode.
consul_server: true

# This flag provides the number of expected servers in the datacenter.
consul_bootstrap_expect: 1

# You may use IPv4 or IPv6 but if you have multiple interfaces you must be explicit.
consul_bind_addr: "127.0.0.1"

# Advertise addr - if you want to point clients to a different address than bind or LB.
consul_advertise_addr: "127.0.0.1"

# Specifies the secret key to use for encryption of Consul network traffic.
consul_encrypt: ""

# Retrying a join until it is successful.
consul_retry_join: []

# If set to true, Consul requires that all incoming connections make use of TLS and that the client provides a certificate signed by 
# a Certificate Authority from the ca_file or ca_path. Default is false.
consul_verify_incoming: false

# If set to true, Consul requires that all outgoing connections from this agent make use of TLS and that the server provides a certificate that is signed by
# a Certificate Authority from the ca_file or ca_path. Default is false.
consul_verify_outgoing: false

# When set to true, Consul verifies the TLS certificate presented by the servers match the hostname server.<datacenter>.<domain>.
# By default this is false, and Consul does not verify the hostname of the certificate, only that it is signed by a trusted CA.
consul_verify_server_hostname: false

consul_tls_ca_cert_file: "consul-agent-ca-cert.pem"
consul_tls_ca_key_file: "consul-agent-ca-key.pem"

consul_tls_sni: "localhost.localdomain"

consul_tls_cert_file: "{{consul_datacenter}}-server-consul-0.pem"
consul_tls_key_file: "{{consul_datacenter}}-server-consul-0-key.pem"

consul_tls_days: 365

# allow_tls - This option enables auto_encrypt on the servers and allows them to automatically distribute certificates from the Connect CA to the clients.
# If enabled, the server can accept incoming connections from both the built-in CA and the Connect CA, as well as their certificates.
# Note, the server will only present the built-in CA and certificate, which the client can verify using the CA it received from auto_encrypt endpoint.
# If disabled, a client configured with auto_encrypt.tls will be unable to start. Default is false
consul_auto_encrypt:
  allow_tls: false
  tls: false

# See detailed documentation https://developer.hashicorp.com/consul/docs/agent/config/config-files#acl-parameters
consul_acl:
  enabled: true
  default_policy: "deny"
  enable_token_persistence: true

# Consul acls is a list of consul policies
consul_acls: []

# See detailed documentation https://developer.hashicorp.com/consul/docs/agent/config/config-files#connect-parameters
consul_connect_enabled: true

# Consul ports
consul_ports_http: 8500
consul_ports_https: 8501
consul_ports_grpc: 8502
consul_ports_grpc_tls: 8503
consul_ports_dns: 8600
